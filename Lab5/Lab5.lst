
AVRASM ver. 2.1.42  C:\Users\Kimichi Habi\Desktop\EE346\Lab5\Lab5.asm Tue Nov 27 15:54:26 2018

C:\Users\Kimichi Habi\Desktop\EE346\Lab5\Lab5.asm(9): Including file 'C:\Program Files (x86)\Atmel\AVR Tools\AvrAssembler2\Appnotes\m328pdef.inc'
C:\Users\Kimichi Habi\Desktop\EE346\Lab5\Lab5.asm(44): Including file 'C:\Users\Kimichi Habi\Desktop\EE346\Lab5\spi_shield.inc'
C:\Users\Kimichi Habi\Desktop\EE346\Lab5\Lab5.asm(45): Including file 'C:\Users\Kimichi Habi\Desktop\EE346\Lab5\testbench.inc'
C:\Users\Kimichi Habi\Desktop\EE346\Lab5\Lab5.asm(46): Including file 'C:\Users\Kimichi Habi\Desktop\EE346\Lab5\pseudo_instr.inc'
C:\Users\Kimichi Habi\Desktop\EE346\Lab5\Lab5.asm(47): Including file 'C:\Users\Kimichi Habi\Desktop\EE346\Lab5\maze.inc'
                 
                 
                 ; Lab 5 - Take a Step and Animation
                 ; Version 2.5
                 ; Date: November 27, 2018
                 ; Written By : Socheath Sok
                 ; Lab Hours  : Monday 3:00pm - 4:30pm
                 ;  ----------------------------------------
                 
                 	.INCLUDE <m328pdef.inc>
                 
                 ;***** Created: 2011-08-25 20:59 ******* Source: ATmega328P.xml **********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m328Pdef.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega328P
                 ;* Date              : 2011-08-25
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega328P
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M328PDEF_INC_
                 #define _M328PDEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega328P
                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x95
                 .equ	SIGNATURE_002	= 0x0f
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                 .equ	PRR	= 0x64	; MEMORY MAPPED
                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	SPMCSR	= 0x37
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	SMCR	= 0x33
                 .equ	ACSR	= 0x30
                 .equ	SPDR	= 0x2e
                 .equ	SPSR	= 0x2d
                 .equ	SPCR	= 0x2c
                 .equ	GPIOR2	= 0x2b
                 .equ	GPIOR1	= 0x2a
                 .equ	OCR0B	= 0x28
                 .equ	OCR0A	= 0x27
                 .equ	TCNT0	= 0x26
                 .equ	TCCR0B	= 0x25
                 .equ	TCCR0A	= 0x24
                 .equ	GTCCR	= 0x23
                 .equ	EEARH	= 0x22
                 .equ	EEARL	= 0x21
                 .equ	EEDR	= 0x20
                 .equ	EECR	= 0x1f
                 .equ	GPIOR0	= 0x1e
                 .equ	EIMSK	= 0x1d
                 .equ	EIFR	= 0x1c
                 .equ	PCIFR	= 0x1b
                 .equ	TIFR2	= 0x17
                 .equ	TIFR1	= 0x16
                 .equ	TIFR0	= 0x15
                 .equ	PORTD	= 0x0b
                 .equ	DDRD	= 0x0a
                 .equ	PIND	= 0x09
                 .equ	PORTC	= 0x08
                 .equ	DDRC	= 0x07
                 .equ	PINC	= 0x06
                 .equ	PORTB	= 0x05
                 .equ	DDRB	= 0x04
                 .equ	PINB	= 0x03
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** USART0 ***********************
                 ; UDR0 - USART I/O Data Register
                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR0A - USART Control and Status Register A
                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                 .equ	U2X0	= 1	; Double the USART transmission speed
                 .equ	UPE0	= 2	; Parity Error
                 .equ	DOR0	= 3	; Data overRun
                 .equ	FE0	= 4	; Framing Error
                 .equ	UDRE0	= 5	; USART Data Register Empty
                 .equ	TXC0	= 6	; USART Transmitt Complete
                 .equ	RXC0	= 7	; USART Receive Complete
                 
                 ; UCSR0B - USART Control and Status Register B
                 .equ	TXB80	= 0	; Transmit Data Bit 8
                 .equ	RXB80	= 1	; Receive Data Bit 8
                 .equ	UCSZ02	= 2	; Character Size
                 .equ	TXEN0	= 3	; Transmitter Enable
                 .equ	RXEN0	= 4	; Receiver Enable
                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR0C - USART Control and Status Register C
                 .equ	UCPOL0	= 0	; Clock Polarity
                 .equ	UCSZ00	= 1	; Character Size
                 .equ	UCPHA0	= UCSZ00	; For compatibility
                 .equ	UCSZ01	= 2	; Character Size
                 .equ	UDORD0	= UCSZ01	; For compatibility
                 .equ	USBS0	= 3	; Stop Bit Select
                 .equ	UPM00	= 4	; Parity Mode Bit 0
                 .equ	UPM01	= 5	; Parity Mode Bit 1
                 .equ	UMSEL00	= 6	; USART Mode Select
                 .equ	UMSEL0	= UMSEL00	; For compatibility
                 .equ	UMSEL01	= 7	; USART Mode Select
                 .equ	UMSEL1	= UMSEL01	; For compatibility
                 
                 ; UBRR0H - USART Baud Rate Register High Byte
                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR0L - USART Baud Rate Register Low Byte
                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** TWI **************************
                 ; TWAMR - TWI (Slave) Address Mask Register
                 .equ	TWAM0	= 1	; 
                 .equ	TWAMR0	= TWAM0	; For compatibility
                 .equ	TWAM1	= 2	; 
                 .equ	TWAMR1	= TWAM1	; For compatibility
                 .equ	TWAM2	= 3	; 
                 .equ	TWAMR2	= TWAM2	; For compatibility
                 .equ	TWAM3	= 4	; 
                 .equ	TWAMR3	= TWAM3	; For compatibility
                 .equ	TWAM4	= 5	; 
                 .equ	TWAMR4	= TWAM4	; For compatibility
                 .equ	TWAM5	= 6	; 
                 .equ	TWAMR5	= TWAM5	; For compatibility
                 .equ	TWAM6	= 7	; 
                 .equ	TWAMR6	= TWAM6	; For compatibility
                 
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter1 Control Register C
                 .equ	FOC1B	= 6	; 
                 .equ	FOC1A	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	TOIE2A	= TOIE2	; For compatibility
                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                 
                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                 
                 ; TCCR2A - Timer/Counter2 Control Register A
                 .equ	WGM20	= 0	; Waveform Genration Mode
                 .equ	WGM21	= 1	; Waveform Genration Mode
                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                 
                 ; TCCR2B - Timer/Counter2 Control Register B
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM22	= 3	; Waveform Generation Mode
                 .equ	FOC2B	= 6	; Force Output Compare B
                 .equ	FOC2A	= 7	; Force Output Compare A
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2A - Timer/Counter2 Output Compare Register A
                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; OCR2B - Timer/Counter2 Output Compare Register B
                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                 .equ	EXCLK	= 6	; Enable External Clock Input
                 
                 ; GTCCR - General Timer Counter Control register
                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PSR2	= PSRASY	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 .equ	ACME	= 6	; 
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ	ADC0D	= 0	; 
                 .equ	ADC1D	= 1	; 
                 .equ	ADC2D	= 2	; 
                 .equ	ADC3D	= 3	; 
                 .equ	ADC4D	= 4	; 
                 .equ	ADC5D	= 5	; 
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR1 - Digital Input Disable Register 1
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; 
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ	OCR0A_0	= 0	; 
                 .equ	OCR0A_1	= 1	; 
                 .equ	OCR0A_2	= 2	; 
                 .equ	OCR0A_3	= 3	; 
                 .equ	OCR0A_4	= 4	; 
                 .equ	OCR0A_5	= 5	; 
                 .equ	OCR0A_6	= 6	; 
                 .equ	OCR0A_7	= 7	; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 .equ	OCR0B_0	= 0	; 
                 .equ	OCR0B_1	= 1	; 
                 .equ	OCR0B_2	= 2	; 
                 .equ	OCR0B_3	= 3	; 
                 .equ	OCR0B_4	= 4	; 
                 .equ	OCR0B_5	= 5	; 
                 .equ	OCR0B_6	= 6	; 
                 .equ	OCR0B_7	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PSR10	= PSRSYNC	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register
                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                 
                 ; EIMSK - External Interrupt Mask Register
                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                 
                 ; EIFR - External Interrupt Flag Register
                 .equ	INTF0	= 0	; External Interrupt Flag 0
                 .equ	INTF1	= 1	; External Interrupt Flag 1
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                 
                 ; PCMSK2 - Pin Change Mask Register 2
                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                 
                 ; PCMSK1 - Pin Change Mask Register 1
                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                 
                 ; PCMSK0 - Pin Change Mask Register 0
                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; CLKPR - Clock Prescale Register
                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                 
                 ; SPMCSR - Store Program Memory Control and Status Register
                 .equ	SELFPRGEN	= 0	; Self Programming Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ	IVCE	= 0	; 
                 .equ	IVSEL	= 1	; 
                 .equ	PUD	= 4	; 
                 .equ	BODSE	= 5	; BOD Sleep Enable
                 .equ	BODS	= 6	; BOD Sleep
                 
                 ; MCUSR - MCU Status Register
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	EXTREF	= EXTRF	; For compatibility
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; SMCR - Sleep Mode Control Register
                 .equ	SE	= 0	; Sleep Enable
                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                 
                 ; GPIOR2 - General Purpose I/O Register 2
                 .equ	GPIOR20	= 0	; 
                 .equ	GPIOR21	= 1	; 
                 .equ	GPIOR22	= 2	; 
                 .equ	GPIOR23	= 3	; 
                 .equ	GPIOR24	= 4	; 
                 .equ	GPIOR25	= 5	; 
                 .equ	GPIOR26	= 6	; 
                 .equ	GPIOR27	= 7	; 
                 
                 ; GPIOR1 - General Purpose I/O Register 1
                 .equ	GPIOR10	= 0	; 
                 .equ	GPIOR11	= 1	; 
                 .equ	GPIOR12	= 2	; 
                 .equ	GPIOR13	= 3	; 
                 .equ	GPIOR14	= 4	; 
                 .equ	GPIOR15	= 5	; 
                 .equ	GPIOR16	= 6	; 
                 .equ	GPIOR17	= 7	; 
                 
                 ; GPIOR0 - General Purpose I/O Register 0
                 .equ	GPIOR00	= 0	; 
                 .equ	GPIOR01	= 1	; 
                 .equ	GPIOR02	= 2	; 
                 .equ	GPIOR03	= 3	; 
                 .equ	GPIOR04	= 4	; 
                 .equ	GPIOR05	= 5	; 
                 .equ	GPIOR06	= 6	; 
                 .equ	GPIOR07	= 7	; 
                 
                 ; PRR - Power Reduction Register
                 .equ	PRADC	= 0	; Power Reduction ADC
                 .equ	PRUSART0	= 1	; Power Reduction USART
                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                 .equ	PRTWI	= 7	; Power Reduction TWI
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                 
                 ; EEARH - EEPROM Address Register High Byte
                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock output
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select reset vector
                 .equ	BOOTSZ0	= 1	; Select boot size
                 .equ	BOOTSZ1	= 2	; Select boot size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	WDTON	= 4	; Watchdog Timer Always On
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	DWEN	= 6	; debugWIRE Enable
                 .equ	RSTDISBL	= 7	; External reset disable
                 
                 ; EXTENDED fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                 .equ	IOEND	= 0x00ff
                 .equ	SRAM_START	= 0x0100
                 .equ	SRAM_SIZE	= 2048
                 .equ	RAMEND	= 0x08ff
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x03ff
                 .equ	EEPROMEND	= 0x03ff
                 .equ	EEADRBITS	= 10
                 #pragma AVRPART MEMORY PROG_FLASH 32768
                 #pragma AVRPART MEMORY EEPROM 1024
                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x3800
                 .equ	NRWW_STOP_ADDR	= 0x3fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x37ff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x3f00
                 .equ	SECONDBOOTSTART	= 0x3e00
                 .equ	THIRDBOOTSTART	= 0x3c00
                 .equ	FOURTHBOOTSTART	= 0x3800
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                 
                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                 
                 #endif  /* _M328PDEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                 	; Pushbutton switch ports
                 	.EQU dff_Q = PD2 		   // Q output of debounce flip-flop (PD2)
                 	.EQU dff_clk = PD5 		   // clock of debounce flip-flop (PD5)
                 	.EQU S0 = 0b00 			   // state 0
                 	.EQU S1 = 0b01 			   // state 1
                 	.EQU S2 = 0b10 			   // state 2
                 	.EQU s3 = 0b11			   // state 3
                 
                 	; true and false
                 	.EQU true = 0xFF
                 	.EQU false = 0x00
                 
                 	.DSEG
000100           	 room:  	 .BYTE   1       
000101           	 dir:   	 .BYTE   1
000102           	 next_state: .BYTE	 1
000103           	 walk: 		 .BYTE 	 1
000104           	 row: 		 .BYTE   1 //  row address
000105           	 col: 		 .BYTE   1 //  column address
000106           	 bees:		 .BYTE   1 //  number of bees
                 
                 	.CSEG
                 	.ORG 0x0000
                 	RST_VECT:
000000 c2ad          rjmp reset                  
                  	.ORG INT0addr 				
000002 940c 01dc 	jmp INT0_ISR
                 	.ORG 0x0100
                 
                 	theBees:
000100 0600
000101 4f5b
C:\Users\Kimichi Habi\Desktop\EE346\Lab5\Lab5.asm(41): warning: .cseg .db misalignment - padding zero byte
000102 0066      	 .DB	0x00,0x06,0x5B,0x4F,0x66
                 	
                 	.ORG 0x0150                 
                 	.INCLUDE "spi_shield.inc"
                 
                 .DEF spiLEDS=r8
                 .DEF spi7SEG=r7
                 
                 ; Switches
                 .DEF switch=r6
                 
                 ; Temporary storage of AVR Status REGister Flag bits
                 .DEF reg_F=r15
                 
                 ; 7-segment display
                 .EQU seg_a=0
                 .EQU seg_b=1
                 .EQU seg_c=2
                 .EQU seg_d=3
                 .EQU seq_e=4
                 .EQU seg_f=5
                 .EQU seg_g=6
                 .EQU seg_dp=7
                 
                 InitShield:
                 ; Disable interrupts and configure stack pointer for 328P
000150 94f8      	cli
                 
                 ; Initialize Switches with Pull-up resistors and Test LEDs
000151 b107      	in		r16,DDRC		// input Port C Data Direction Register (0x07) for switches 5 to 0
000152 7c00      	cbr		r16,0b00111111	// define bits 5 to 0 as input (clear bit register)
000153 b907      	out		DDRC,r16		// output
                 
000154 b108      	in		r16,PORTC		// input Port C Register (0x08) for switches 5 to 0
000155 630f      	sbr		r16,0b00111111	// add pull-up resistors (PUR)
000156 b908      	out		PORTC,r16		// output
                 
000157 b10a      	in		r16,DDRD		// input Port D Data Direction Register (0x0A) for switches 7 to 6
000158 730f      	cbr		r16,0b11000000	// define bits 7 to 6 as input (clear)
000159 b90a      	out		DDRD,r16		// output
                 
00015a b10b      	in		r16,PORTD		// input Port D Register (0x0B) for switches 7 to 6
00015b 6c00      	sbr		r16,0b11000000	// add pull-up resistors (PUR)
00015c b90b      	out		PORTD,r16		// output
                 
                 ; Initialize SPI Port
00015d b104      	in		r16,DDRB		// Input from Port B Data Direction Register (DDRB) at i/o address 0x04
00015e 620f      	sbr 	r16,0b00101111	// Set PB5, PB3, PB2 (SCK, MOSI, SS) and PB1, PB0 (TEST LEDs) as outputs
00015f b904      	out 	DDRB,r16		// Output to Port B Data Direction Register (DDRB) at i/o address 0x04
                 
000160 e501      	ldi		r16,0b01010001	// Set SPCR Enable (SPE) bit 6, Master (MSTR) bit 4, clock rate fck/16 (SPR1 = 0,SPR0 = 1)
000161 bd0c      	out 	SPCR,r16		// Output to SPI Control Register (SPCR) at i/o address 0x2c
                 
000162 982a      	cbi		PORTB,2			// Clear I/O Port B bit 2 (SS) at i/o address 0x05
000163 9829      	cbi		PORTB,1			// Clear I/O Port B bit 1 (TEST LED1)
000164 9828      	cbi		PORTB,0			// Clear I/O Port B bit 0 (TEST LED0)
000165 9508      	ret
                 
                 ReadSwitches:
                 ; SPI Software Wires
000166 931f         push  r17
000167 930f         push  r16
                 
000168 b116         in    r17, PINC       // input port C pins (0x06) into register r17
000169 b109         in    r16, PIND       // input port D pins (0x09) into register r16
                 
00016a 731f         cbr   r17, 0b11000000 // clear non-switch bits 7 and 6
00016b 7c00         cbr   r16, 0b00111111 // clear non-switch bits 5 to 0
                 
00016c 2b01         or    r16, r17        // concatenate switches  SW7 - SW6 : SW5 - SW0
00016d 2e60         mov   r6, r16         // move to standardized switch register
                 
00016e 910f         pop   r16
00016f 911f         pop   r17
000170 9508         ret
                 
                 WriteDisplay:
                 ; Save SREG
000171 92ff          push  reg_F
000172 b6ff          in    reg_F, SREG
                 ; Start transmission of data
000173 bc8e      	out 	SPDR,spiLEDS
000174 d007      	rcall	spiTxWait
000175 bc7e      	out		SPDR,spi7SEG
000176 d005      	rcall	spiTxWait
000177 9a2a      	sbi		PORTB,PB2		// strobe latches
000178 982a      	cbi		PORTB,PB2
                 ; Restore SREG
000179 beff      	out   SREG, reg_F
00017a 90ff      	pop   reg_F
00017b 9508      	ret
                 
                 SpiTxWait:
00017c 930f      	push	r16
                 ; Wait for transmission complete
                 spiPolling:
00017d b50d      	in		r16,SPSR
00017e fb07      	bst		r16,SPIF
00017f f7ee      	brtc 	spiPolling
000180 910f      	pop		r16
000181 9508      	ret
                 
                 ; --------------------------
                 	.INCLUDE "testbench.inc"    
                 
                 ; Testbench Utility
                 ; Version 1.1
                 ; ----------------------------------------
                 
                 ;directions (most significant 6 bits zero) 
                 .EQU south=0b00
                 .EQU east=0b01
                 .EQU west=0b10
                 .EQU north=0b11
                 
                 
                 ; --------------------------
                 ; --- Draw the Room ---
                 ; input argument in r24 is the room
                 ; return value in r24 is the room formatted
                 ; for a 7-segment display
                 ; No general purpose registers are modified,
                 ; while SREG is modified by this subroutine.
                 
                 DrawRoom:
                 	
000182 92ff      	push   reg_F 			// moving this register onto the stack so
000183 b6ff      	in     reg_F,SREG       // it can be used to save the value in SREG
000184 931f      	push   r17
                 
000185 2f18          mov    r17, r24         // move input to temporary register
000186 7083      	cbr    r24, 0b11111100  // room bits 1 and 0 are already aligned to segments b and a
000187 701c          cbr    r17, 0b11110011
000188 9512      	swap   r17
000189 9516          lsr    r17              // room bits 3 and 2 are now aligned to segments g and f
00018a 2b81      	or     r24, r17         // SW7:SW4 now mapped to 7 segment display
                 		
00018b 911f      	pop    r17 				// restore original contents of r17
00018c beff      	out    SREG,reg_F
00018d 90ff      	pop    reg_F
                 
00018e 9508      	ret
                 
                 ; --------------------------
                 ; --- Set Direction Bit ---
                 ; The input argument in r24 is the direction
                 ; and return value in r24 is the 7-segment display
                 ; no registers are modified by this subroutine
                 
                 DrawDirection:
00018f 92ff      	push  reg_F
000190 b6ff      	in    reg_F,SREG
000191 930f      	push  r16
                 
000192 2f08          mov   r16, r24          ; move direction bear is facing into r16
000193 e480          ldi   r24, 1<<seg_g     ; guess bear is facing south
000194 3000          cpi   r16,south         ; if bear is facing south then we are done             
000195 f039          breq  found
000196 e280          ldi   r24, 1<<seg_f     ; guess bear is facing west
000197 3002          cpi   r16,west          ; if bear is facing west then we are done             
000198 f021          breq  found
000199 e082      	ldi   r24, 1<<seg_b     ; guess bear is facing east
00019a 3001          cpi   r16,east          ; if bear is facing east then we are done             
00019b f009          breq  found
00019c e081          ldi   r24, 1<<seg_a     ; bear is facing north
                 
                 found:
00019d 910f      	pop    r16
00019e beff      	out    SREG,reg_F
00019f 90ff      	pop    reg_F
                 
0001a0 9508      	ret
                 
                 	.INCLUDE "pseudo_instr.inc" 
                 
                 ; --------------------------
                 ; ------- Turn Left --------
                 ; Called from WhichWay subroutine 
                 ; The input and output is register r24
                 ; register SREG is modified by this subroutine
                 TurnLeft:
0001a1 930f       push r16
                 
0001a2 2f08       mov r16,r24	//use r24 as input
0001a3 2788       clr r24		//use r24 as output
                 
0001a4 fb00       bst r16,0		//store y bit 0 into T
0001a5 f981       bld r24,1		//load directive 1 from T
                 
0001a6 9500       com r16		//store /x into T
0001a7 fb01       bst r16,1
0001a8 f980       bld r24,0		//load directive 0 from T
                 
0001a9 910f       pop r16
                 
0001aa 9508       ret
                 ; --------------------------
                 ; ------- Turn Right -------
                 ; Called from WhichWay subroutine 
                 ; The input and output is register r24
                 ; register SREG is modified by this subroutine
                 TurnRight:
0001ab 930f       push r16
                 
0001ac 2f08       mov r16,r24	//use r24 as input
0001ad 2788       clr r24		//use r24 as output
                 
0001ae fb01       bst r16,1		//store x bit 0 bit into T 
0001af f980       bld r24,0		//load directive 0 from T
                 
0001b0 9500       com r16		//store /y into T bit
0001b1 fb00       bst r16,0
0001b2 f981       bld r24,1		//load directive 1 from T
                 
0001b3 910f       pop r16
0001b4 9508       ret
                 ; --------------------------
                 ; ------- Turn Around -------
                 ; Called from WhichWay subroutine 
                 ; The input and output is register r24
                 ; register SREG is modified by this subroutine
                 TurnAround:
0001b5 9580       com r24		
0001b6 7083       cbr r24,0xFC
                 
0001b7 9508       ret
                 
                 HitWall:
0001b8 930f       push r16
0001b9 dfd5       rcall DrawDirection
0001ba 2f08       mov r16,r24
0001bb 2f86       mov r24,r22
0001bc dfc5       rcall DrawRoom
0001bd 2380       and r24,r16
0001be 910f       pop r16
0001bf 9508       ret
                 
                 RightPaw:
0001c0 dfea       rcall TurnRight
0001c1 dff6       rcall HitWall
0001c2 9508       ret
                 Delay:
0001c3 92ff      	push r15
0001c4 b6ff      	in r15, SREG
0001c5 930f      	push r16
0001c6 931f      	push r17
0001c7 e119      	ldi	r17,0x19
                 	wait:
0001c8 9bb8      		sbis TIFR2, TOV2
0001c9 cffe      		rjmp wait
0001ca 9ab8      		sbi TIFR2, TOV2 // clear flag bit by writing a one (1)
0001cb e604      		ldi r16,0x64 	// load value of 100 tics
0001cc 9300 00b2 		sts	TCNT2,r16
0001ce d00a      		rcall Pulse		//Check pulsests TCNT2,r16
0001cf 3090      		cpi r25,0x00
0001d0 f011      		breq EndLoop
0001d1 951a      		dec r17
0001d2 f7a9      		brne wait
                 	EndLoop:
0001d3 e091      	ldi r25,0x01
0001d4 910f      	pop r16
0001d5 911f      	pop r17
0001d6 beff      	out SREG, r15
0001d7 90ff      	pop r15
0001d8 9508      ret
                 
                 Pulse:
0001d9 985d      	cbi		PORTD,dff_clk		// clears clock
0001da 9a5d      	sbi		PORTD,dff_clk		// sets clock
0001db 9508      ret
                 
                 ; ---- External Interrupt 0 Service Routine -----------------
                 	; Called when a falling edge is asserted on the INT0 pin (PIND2)
                 	; INTF0 flag automatically cleared by AVR on vector interrupt
                 	; SRAM Variable room is modified by this ISR
                 INT0_ISR:
0001dc 92ff       	push reg_F
0001dd b6ff       	in reg_F,SREG
0001de 930f       	push r16
0001df ef0f       	ldi r16, true
0001e0 9300 0103  	sts walk, r16
0001e2 910f       	pop r16
0001e3 beff       	out SREG,reg_F
0001e4 90ff       	pop reg_F
0001e5 9518       	reti
                 	.INCLUDE "maze.inc"			
                 
                 	
0001e6 0905
0001e7 0909
0001e8 0919
0001e9 0301
0001ea 0905
0001eb 0909
0001ec 0909
0001ed 0909
0001ee 0929
0001ef 0209      	.DB		0x05,0x09,0x09,0x09,0x19,0x09,0x01,0x03,0x05,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x29,0x09,0x09,0x02; 00
0001f0 090c
0001f1 0309
0001f2 0905
0001f3 060a
0001f4 0506
0001f5 0909
0001f6 3909
0001f7 0909
0001f8 0503
0001f9 0603      	.DB		0x0C,0x09,0x09,0x03,0x05,0x09,0x0A,0x06,0x06,0x05,0x09,0x09,0x09,0x39,0x09,0x09,0x03,0x05,0x03,0x06; 01
0001fa 0905
0001fb 060b
0001fc 0506
0001fd 0a09
0001fe 0c36
0001ff 0909
000200 0909
000201 0b01
000202 0a0c
000203 0606      	.DB		0x05,0x09,0x0B,0x06,0x06,0x05,0x09,0x0A,0x36,0x0C,0x09,0x09,0x09,0x09,0x01,0x0B,0x0C,0x0A,0x06,0x06; 02
000204 0d06
000205 0a09
000206 0606
000207 0305
000208 090c
000209 0503
00020a 0909
00020b 050a
00020c 0909
00020d 0208      	.DB		0x06,0x0D,0x09,0x0A,0x06,0x06,0x05,0x03,0x0C,0x09,0x03,0x05,0x09,0x09,0x0A,0x05,0x09,0x09,0x08,0x02; 03
00020e 2506
00020f 0909
000210 060a
000211 0c06
000212 0909
000213 0c0a
000214 0909
000215 4603
000216 0905
000217 0a09      	.DB		0x06,0x25,0x09,0x09,0x0A,0x06,0x06,0x0C,0x09,0x09,0x0A,0x0C,0x09,0x09,0x03,0x46,0x05,0x09,0x09,0x0A; 04
000218 0c06
000219 0503
00021a 0209
00021b 0516
00021c 0909
00021d 0909
00021e 0309
00021f 0606
000220 030c
000221 0305      	.DB		0x06,0x0C,0x03,0x05,0x09,0x02,0x16,0x05,0x09,0x09,0x09,0x09,0x09,0x03,0x06,0x06,0x0C,0x03,0x05,0x03; 05
000222 0506
000223 0c0a
000224 0603
000225 0606
000226 0105
000227 0503
000228 0603
000229 0606
00022a 3a05
00022b 0606      	.DB		0x06,0x05,0x0A,0x0C,0x03,0x06,0x06,0x06,0x05,0x01,0x03,0x05,0x03,0x06,0x06,0x06,0x05,0x3A,0x06,0x06; 06
00022c 0c06
00022d 0309
00022e 0606
00022f 020c
000230 0606
000231 0606
000232 0c06
000233 0612
000234 0506
000235 0602      	.DB		0x06,0x0C,0x09,0x03,0x06,0x06,0x0C,0x02,0x06,0x06,0x06,0x06,0x06,0x0C,0x12,0x06,0x06,0x05,0x02,0x06; 07
000236 0706
000237 0a05
000238 0c0e
000239 0209
00023a 0606
00023b 0606
00023c 090c
00023d 060a
00023e 0a0c
00023f 0606      	.DB		0x06,0x07,0x05,0x0A,0x0E,0x0C,0x09,0x02,0x06,0x06,0x06,0x06,0x0C,0x09,0x0A,0x06,0x0C,0x0A,0x06,0x06; 08
000240 0606
000241 090c
000242 0909
000243 0809
000244 0602
000245 0c36
000246 0909
000247 0809
000248 0319
000249 0606      	.DB		0x06,0x06,0x0C,0x09,0x09,0x09,0x09,0x08,0x02,0x06,0x36,0x0C,0x09,0x09,0x09,0x08,0x19,0x03,0x06,0x06; 09
00024a 080c
00024b 0909
00024c 0909
00024d 0301
00024e 0606
00024f 090c
000250 0309
000251 090d
000252 0603
000253 0606      	.DB		0x0C,0x08,0x09,0x09,0x09,0x09,0x01,0x03,0x06,0x06,0x0C,0x09,0x09,0x03,0x0D,0x09,0x03,0x06,0x06,0x06; 0A
000254 2105
000255 0909
000256 070b
000257 0646
000258 0c06
000259 0909
00025a 0403
00025b 0109
00025c 0602
00025d 0606      	.DB		0x05,0x21,0x09,0x09,0x0B,0x07,0x46,0x06,0x06,0x0C,0x09,0x09,0x03,0x04,0x09,0x01,0x02,0x06,0x06,0x06; 0B
00025e 0c06
00025f 0909
000260 0209
000261 0606
000262 0d06
000263 0909
000264 0c0a
000265 0603
000266 0606
000267 0606      	.DB		0x06,0x0C,0x09,0x09,0x09,0x02,0x06,0x06,0x06,0x0D,0x09,0x09,0x0A,0x0C,0x03,0x06,0x06,0x06,0x06,0x06; 0C
000268 0506
000269 0909
00026a 0a09
00026b 0c06
00026c 050a
00026d 0909
00026e 0309
00026f 1606
000270 0606
000271 0606      	.DB		0x06,0x05,0x09,0x09,0x09,0x0A,0x06,0x0C,0x0A,0x05,0x09,0x09,0x09,0x03,0x06,0x16,0x06,0x06,0x06,0x06; 0D
000272 0c06
000273 0909
000274 0309
000275 0904
000276 0a09
000277 2305
000278 0a05
000279 0606
00027a 0606
00027b 0606      	.DB		0x06,0x0C,0x09,0x09,0x09,0x03,0x04,0x09,0x09,0x0A,0x05,0x23,0x05,0x0A,0x06,0x06,0x06,0x06,0x06,0x06; 0E
00027c 0904
00027d 3909
00027e 0809
00027f 0502
000280 0301
000281 0606
000282 0506
000283 0e0a
000284 0606
000285 0606      	.DB		0x04,0x09,0x09,0x39,0x09,0x08,0x02,0x05,0x01,0x03,0x06,0x06,0x06,0x05,0x0A,0x0E,0x06,0x06,0x06,0x06; 0F
000286 0d06
000287 0909
000288 0909
000289 060a
00028a 0606
00028b 0606
00028c 0606
00028d 0905
00028e 060a
00028f 0606      	.DB		0x06,0x0D,0x09,0x09,0x09,0x09,0x0A,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0x05,0x09,0x0A,0x06,0x06,0x06; 10
000290 1d06
000291 0909
000292 0909
000293 0a09
000294 0606
000295 0606
000296 0a2c
000297 0506
000298 0a09
000299 0606      	.DB		0x06,0x1D,0x09,0x09,0x09,0x09,0x09,0x0A,0x06,0x06,0x06,0x06,0x2C,0x0A,0x06,0x05,0x09,0x0A,0x06,0x06; 11
00029a 0904
00029b 0909
00029c 0909
00029d 0909
00029e 0c0a
00029f 060a
0002a0 0905
0002a1 060a
0002a2 090d
0002a3 060a      	.DB		0x04,0x09,0x09,0x09,0x09,0x09,0x09,0x09,0x0A,0x0C,0x0A,0x06,0x05,0x09,0x0A,0x06,0x0D,0x09,0x0A,0x06; 12
0002a4 0904
0002a5 0909
0002a6 0929
0002a7 0909
0002a8 0909
0002a9 0809
0002aa 0908
0002ab 2809
0002ac 0909
0002ad 0a09      	.DB		0x04,0x09,0x09,0x09,0x29,0x09,0x09,0x09,0x09,0x09,0x09,0x08,0x08,0x09,0x09,0x28,0x09,0x09,0x09,0x0A; 13
                 
                 reset:
0002ae e008      	ldi   r16,HIGH(RAMEND)     // Initializes Stack Pointer to RAMEND address 0x08ff
0002af bf0e      	out   SPH,r16              
0002b0 ef0f      	ldi   r16,LOW(RAMEND)
0002b1 bf0d      	out   SPL,r16              
                 
0002b2 940e 0150 	call  InitShield           // initialize GPIO Ports and SPI communications
0002b4 2488      	clr   spiLEDS              
0002b5 2477      	clr   spi7SEG              
                 
                 	;Initialize pins for push-button debounce circuit | Table 13-1
0002b6 9a55      	sbi DDRD, dff_clk 		   
0002b7 9852      	cbi DDRD, dff_Q 		   
0002b8 985a      	cbi PORTD, dff_Q 		   
                 
                 	; Initialize External Interrupt 0
0002b9 98e8      	cbi EIMSK, INT0 
0002ba 9100 0069 	lds r16, EICRA 
0002bc 7f0e      	cbr r16, 0b00000001
0002bd 6002      	sbr r16, 0b00000010
0002be 9300 0069 	sts EICRA, r16 
0002c0 9ae8      	sbi EIMSK, INT0 
                 
                 	;Initialize SRM Variables for row, column and bees
0002c1 2700      	clr   r16                  // set r16 to zero 
0002c2 9300 0100 	sts   room, r16			   // no room at starting position
                 	;sts	  next_state,r16
0002c4 9300 0105 	sts   col, r16			   // col = 0x00
0002c6 9300 0106 	sts   bees, r16			   // bees = 0x00
0002c8 9300 0103 	sts   walk, r16			   
0002ca e003      	ldi   r16, 0x03            
0002cb 9300 0101 	sts   dir, r16			   // starting dir = north
0002cd e104      	ldi   r16, 0x14
0002ce 9300 0104 	sts   row, r16			   // row = 0x14
                 
                 	//Timer 1
0002d0 e604      	ldi r16,0x64 	
0002d1 9300 00b2 	sts	TCNT2,r16
0002d3 e007      	ldi r16,(1<<cs22)|(1<<cs21)|(1<<cs20) 
0002d4 9300 00b1 	sts TCCR2B,r16 			
0002d6 2488      	clr   spiLEDS              
0002d7 2477      	clr   spi7SEG              
                 
0002d8 9478      	sei
                 
                 loop:
0002d9 940e 0166 	call    ReadSwitches       // read switches into r6
                 
                     // dir  = switch & 0x03;
0002db 2d06      	mov     r16, switch        // move switch to r17
0002dc 7003          cbr     r16, 0xFC          // mask-out most significant 6 bits
0002dd 9300 0101     sts     dir, r16           // save formatted value to SRAM variable dir.
                 
                     /* Moore FSM */
                  	// state = next_state;
0002df 9110 0102  	lds 	r17,next_state // r17 = current state
                 state_S0:
0002e1 3010      	cpi 	r17,S0
0002e2 f449      	brne 	state_S1
0002e3 9180 0100 	lds		r24,room
0002e5 de9c      	rcall	DrawRoom
0002e6 2e78      	mov 	spi7seg,r24
                 	
0002e7 e001      	ldi		r16,S1
0002e8 9300 0102 	sts 	next_state,r16
0002ea d05a      	rcall TakeAStep
0002eb c04b       	rjmp 	end_switch 
                 
                 state_S1:
0002ec 3011      	cpi		r17,S1
0002ed f489      	brne	state_S2
0002ee 9180 0100 	lds		r24,room
0002f0 de91      	rcall	DrawRoom
0002f1 2e78      	mov		spi7seg,r24
0002f2 9180 0101 	lds		r24,dir
0002f4 de9a      	rcall	DrawDirection
0002f5 2a78      	or		spi7seg,r24
                 
                 	// next_state decoder
0002f6 9120 0103 	lds r18, walk
0002f8 2322      	tst r18
0002f9 e000      	ldi r16, S0 // guess walk=false
0002fa f009      	breq end_S1
0002fb e002      	ldi r16, S2 // wrong guess, walk=true
                 end_S1:
0002fc 9300 0102 	sts next_state, r16
0002fe c038      	rjmp end_switch // break
                 state_S2:
0002ff 3012      	cpi 	r17,S2
000300 f541      	brne	state_s3
                 	
000301 e000      	ldi		r16,false
000302 9300 0103 	sts		walk,r16
000304 9140 0101 	lds r20, dir // input arguments are dir, row and column
000306 9180 0104 	lds r24, row
000308 9160 0105 	lds r22, col
00030a d03a      	rcall TakeAStep
00030b 9360 0105 	sts col, r22 	// update column after taking a step
00030d 9380 0104 	sts row, r24 	// update row after taking a step
00030f d05b      	rcall EnterRoom // EnterRoom inputs are outputs from TakeAStep
000310 2f68      	mov r22, r24	// save bees and room into temporary register r22
000311 7f60      	andi r22, 0xF0  // erase the room value while keeping the number of bees
000312 9562      	swap r22 		// swap number of bees to the least significant nibble
000313 9360 0106 	sts bees, r22 	// save number of bees in the room
000315 708f      	andi r24, 0x0F  // remove the number of bees from the room
000316 9380 0100 	sts room, r24 	// save the unformatted room (i.e.as a number)
                 
000318 d06b      	rcall DrawBees
000319 9180 0100 	lds		r24,room
00031b de66      	rcall	DrawRoom
00031c 2e78      	mov		spi7seg,r24
00031d 9180 0100 	lds 	r24,room
00031f d07c      	rcall 	IsHallway
000320 2388      	tst		r24
000321 f019      	breq 	NextState
000322 e001      	ldi		r16,S1
000323 9300 0102 	sts		next_state,r16
                 NextState:
000325 e003      	ldi 	r16,S3
000326 9300 0102 	sts 	next_state, r16
000328 c00e      	rjmp 	end_switch
                 	
                 state_s3:
000329 2477      	clr 	spi7SEG
00032a 9180 0100 	lds 	r24,room
00032c d06f      	rcall 	IsHallway
00032d 2388      	tst 	r24
00032e f021      	breq 	OtherState
00032f e002      	ldi 	r16,S2
000330 9300 0102 	sts 	next_state, r16
000332 c004      	rjmp 	end_switch
                 	
                 OtherState:
000333 e000      	ldi 	r16,s0
000334 9300 0102 	sts 	next_state, r16
000336 c000      	rjmp 	end_switch
                 end_switch:
                 
                 //code to update discrete leds 
000337 fb01      	bst		r16,1
000338 f887      	bld		r8,7
000339 fb10      	bst		r17,0
00033a f886      	bld		r8,6
                 	
00033b 9160 0106 	lds 	r22, bees
00033d 9180 0100 	lds 	r24, room
00033f d05c      	rcall 	IsHallway
000340 d065      	rcall 	TestIsHallway
000341 de81      	rcall	Delay
000342 940e 0171 	call    WriteDisplay
000344 cf94      	rjmp    loop
                 
                 
                 TakeAStep:    // based on direction as defined in Table 5.1
000345 930f      	push 	r16
000346 931f      	push 	r17
                 
000347 2d08      	mov		r16,spiLEDs
000348 7f00      	cbr		r16,0x0F		// clear LED 3 to 0
000349 2e80      	mov		spiLEDs,r16
                 
00034a 2f18      	mov 	r17,r24
00034b 9180 0100 	lds 	r24,room
00034d de34      	rcall	DrawRoom		// obtain room value
00034e 2f08      	mov		r16,r24			
00034f 9180 0101 	lds		r24,dir
000351 de3d      	rcall 	DrawDirection	// obtain dir value
000352 2380      	and 	r24,r16
000353 2388      	tst  	r24			
                 //	cpi		r24,0x00 			// compare room and dir
000354 f479      	brne 	nomove			
000355 2f81      	mov 	r24,r17
                 ;checksouth	
000356 3040      	cpi 	r20,south			// is the bear is facing south?
000357 f411      	brne	checkeast			// check east
000358 9583      	inc 	r24 				// row + 1
000359 c00e      	rjmp	location
                 checkeast:
00035a 3041      	cpi 	r20,east			// is the bear is facing east?
00035b f411      	brne 	checkwest 			// check west 
00035c 9563      	inc		r22					// col + 1
00035d c00a      	rjmp	location		
                 checkwest:
00035e 3042      	cpi		r20,west			// is the bear is facing west?
00035f f411      	brne	checknorth			// check north
000360 956a      	dec 	r22					// col -1
000361 c006      	rjmp	location
                 checknorth:
000362 958a      	dec 	r24					// row -1
000363 c004      	rjmp	location
                 
                 nomove:
000364 2d08      	mov		r16,spiLEDs
000365 600f      	ori		r16,0x0F			// make Led[3:0] =1
000366 2e80      	mov		spiLEDs,r16
000367 2f81      	mov 	r24,r17
                 
                 location:
000368 911f      	pop r17
000369 910f      	pop r16
00036a 9508      	ret
                 
                 EnterRoom:
                 
00036b 92ff       	push 	reg_F
00036c b6ff      	in 		reg_F, SREG			// for carry bit
00036d 93ff      	push ZH
00036e 93ef      	push ZL
00036f 920f      	push r0
000370 921f      	push r1
000371 930f      	push r16
                 	
                 	// Step 1: Starting Address
000372 ecec          ldi ZL,low(theMaze<<1) 		
000373 e0f3          ldi ZH,high(theMaze<<1)
                    
                     // Step 2: Calculate Byte Index
000374 e104      	ldi r16,0x14				// 20 = 0x14
000375 9f80      	mul r24,r16					// row *20
000376 0e06      	add r0,r22					// row*20 + col
000377 2700      	clr r16
000378 1e10      	adc r1,r16					// add carry bit over to mul high byte
                     
                 	// Step 3: Add Index to the Starting Address and load the stored value.
000379 0de0      	add ZL,r0					// adding low bits
00037a 1df1      	adc ZH,r1					// adding high bits
                     
                 	// load the room and bees from program memory 
00037b 9184          lpm r24,Z // load the room with # of bees in room indirect
                 
00037c 910f      	pop r16
00037d 901f      	pop r1
00037e 900f      	pop r0
00037f 91ef      	pop ZL
000380 91ff      	pop ZH
000381 beff      	out SREG,reg_F
000382 90ff      	pop reg_F
000383 9508          ret
                 
                 DrawBees:
000384 93ff      	push ZH
000385 93ef      	push ZL
000386 930f      	push r16
000387 931f      	push r17
                 
000388 e0e0      	ldi ZL,low(theBees<<1) 		// load starting address of theMaze into Z.
000389 e0f2          ldi ZH,high(theBees<<1)
                 	
00038a 9100 0106 	lds		r16,bees			// load number of bees into r16
00038c 2300      	tst		r16			// determine number of bees
00038d f049      	breq	EndBees				// nothing happen if no bee
00038e 0fe0      	add		ZL,r16				// shift the location based on # of bees
00038f 9114      	lpm		r17,Z				// load vaule in Z to r17
000390 2e71      	mov		spi7seg,r17			// display on 7-seg
000391 940e 0171 	call    WriteDisplay
000393 de2f      	rcall	delay				// each delay = 250ms
000394 de2e      	rcall	delay	
000395 de2d      	rcall 	delay
000396 de2c      	rcall	delay
                 EndBees:
000397 91ff      	pop ZH
000398 91ef      	pop ZL
000399 910f      	pop r16
00039a 911f      	pop r17
                 	
00039b 9508      	ret	
                 
                 
                 IsHallway:
00039c 2366      	tst r22
                 //	cpi r22,0x00				// is there bee in the room?
00039d f421      	brne answer_is_no
                 Horizontal:				// Horizontal hallway
00039e 3089      	cpi r24,0x09		// room =0x09? ==> Horizontal hallway
00039f f021      	breq answer_is_yes	// branch to answer_is_yes
                 Vertical:				// Vertical hallway
0003a0 3086      	cpi r24,0x06		// room =0x06? ==> Vertical hallway
0003a1 f011      	breq answer_is_yes 	// branch to answer_is_yes
                 answer_is_no:
0003a2 e080       	ldi r24, false 		// room is not a hallway or contains bees
0003a3 c001       	rjmp endOfHallway
                 answer_is_yes:
0003a4 ef8f      	ldi r24, true
                 endOfHallway:
0003a5 9508      	ret
                 
                 ; ----- Test IsHallway -----
                 
                 TestIsHallWay:
0003a6 930f       	push r16
0003a7 2d08       	mov r16, spiLEDS
0003a8 2388       	tst r24 			// test return value from isHallway
0003a9 f419       	brne inHallway
0003aa 6100       	sbr r16, 0b00010000 // Bear is not in hallway, so turn on LED 4
0003ab 7d0f       	cbr r16, 0b00100000
0003ac c002       	rjmp doneHallway
                 inHallway:
0003ad 6200       	sbr r16, 0b00100000 //Bear is in hallway, so turn on LED 5
0003ae 7e0f       	cbr r16, 0b00010000
                 doneHallway:
0003af 2e80       	mov spiLEDS, r16
0003b0 910f       	pop r16
0003b1 9508       	ret
                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   4 r1 :   4 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   2 r7 :   9 
r8 :  11 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:  24 
r16: 126 r17:  30 r18:   2 r19:   0 r20:   4 r21:   0 r22:  12 r23:   0 
r24:  56 r25:   2 r26:   0 r27:   0 r28:   0 r29:   0 r30:   8 r31:   7 
x  :   0 y  :   0 z  :   2 
Registers used: 16 out of 35 (45.7%)

ATmega328P instruction use summary:
.lds  :   0 .sts  :   0 adc   :   2 add   :   3 adiw  :   0 and   :   2 
andi  :   2 asr   :   0 bclr  :   0 bld   :   6 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  10 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   0 brtc  :   1 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   7 call  :   4 cbi   :   8 cbr   :  12 
clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   9 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   3 cp    :   0 cpc   :   0 
cpi   :  12 cpse  :   0 dec   :   3 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  14 inc   :   2 jmp   :   1 
ld    :   0 ldd   :   0 ldi   :  30 lds   :  17 lpm   :   4 lsl   :   0 
lsr   :   1 mov   :  23 movw  :   0 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   3 ori   :   1 out   :  16 pop   :  29 
push  :  29 rcall :  26 ret   :  18 reti  :   1 rjmp  :  14 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   5 sbic  :   0 sbis  :   1 
sbiw  :   0 sbr   :   6 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  23 
sub   :   0 subi  :   0 swap  :   2 tst   :   7 wdr   :   0 
Instructions used: 42 out of 113 (37.2%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000764    826    406   1232   32768   3.8%
[.dseg] 0x000100 0x000107      0      7      7    2048   0.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 1 warnings
